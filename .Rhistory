devtools::install_github("condwanaland/scrobbler")
library(scrobbler)
my_data <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
my_data
unique(my_data)
colnames(my_data)
unique(my_data$date)
head(my_data)
unique(my_data$date_unix)
my_data <- mutate(my_data, date_time <- as.POSIXct(date_unix, origin="1970-01-01"))
library(tidyverse)
my_data <- mutate(my_data, date_time <- as.POSIXct(date_unix, origin="1970-01-01"))
my_data <- mutate(my_data, date_time = as.POSIXct(date_unix, origin="1970-01-01"))
my_data <- mutate(my_data, date_time = as.POSIXct(my_data$date_unix, origin="1970-01-01"))
my_data <- mutate(my_data, date_time = as.POSIXct(value = my_data$date_unix, origin="1970-01-01"))
type(my_data$date_unix)
str(my_data)
library(stringr)
str_detect(my_data$date_unix, "[:alpha:]")
my_data$date_unix[str_detect(my_data$date_unix, "[:alpha:]")]
my_data <- mutate(my_data, unix_date = as.numeric(date_unix))
my_data <- mutate(my_data, unix_date = as.POSIXct(as.numeric(date_unix)), origin = '1970-01-01', tz = 'ET'))
my_data <- mutate(my_data, unix_date = as.POSIXct(as.numeric(date_unix)), origin = "1970-01-01", tz = "ET"))
my_data <- mutate(my_data, unix_date = as.POSIXct(as.numeric(date_unix)), origin = "1970-01-01", tz = "ET"))
my_data <- mutate(my_data, unix_date = as.POSIXct(as.numeric(date_unix)), origin = "1970-01-01", tz = "ET")
my_data <- mutate(my_data, unix_date = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET'))
my_data <- mutate(my_data, date = as.date(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')))
my_data <- mutate(my_data, date = as.Date(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')))
unique(my_data$date)
my_data <- mutate(my_data, date = as.Date(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')))
library(tidyverse)
library(stringr)
library(scrobbler)
my_data <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
install.packages("tmap")
install.packages("coronavirus")
install.packages("rnaturalearth")
devtools::install_github("ropensci/USAboundaries")
devtools::install_github("ropensci/USAboundariesData")
library(dplyr)
library(sf)
library(readxl)
library(USAboundaries)
setwd(here::here())
install.packages("here")
setwd(here::here())
heart_disease <- read_excel("./data/joinmap_data/hd_all.xlsx", na = "Insufficient Data")
heart_disease <- read_excel("../data/joinmap_data/hd_all.xlsx", na = "Insufficient Data")
heart_disease <- read_excel("/data/joinmap_data/hd_all.xlsx", na = "Insufficient Data")
heart_disease <- read_excel("./data/hd_all.xlsx", na = "Insufficient Data")
setwd(here::here())
heart_disease <- read_excel("./data/hd_all.xlsx", na = "Insufficient Data")
setwd("C:/Users/louri/Desktop/joining data/scripts")
heart_disease <- read_excel("./data/hd_all.xlsx", na = "Insufficient Data")
setwd("C:/Users/louri/Desktop/joining data")
heart_disease <- read_excel("./data/hd_all.xlsx", na = "Insufficient Data")
map_sf <- us_counties()
bad_match <- anti_join(heart_disease, map_sf)
heart_disease <- read_excel("./data/hd_all.xlsx", na = "Insufficient Data")
map_sf <- us_counties()
bad_match <- anti_join(heart_disease, map_sf)
map_sf <- map_sf %>%
rename(State = state_name, County = name)
bad_match <- anti_join(heart_disease, map_sf)
unique(bad_match)
library(readr)
tb_world <- read_csv("./data/who_tb_data.csv")
library(rnaturalearth)
tb_world <- read_csv("./data/who_tb_data.csv")
worldmap <- ne_countries(returnclass = "sf")
tb_world_2000 <- tb_world %>%
filter(year == 2000)
death_2000_df <- left_join(worldmap,
tb_world_2000,
by = c("iso_a3" = "iso3"))
colnames(death_2000_df)
library(tidyverse)
ggplot(death_2000_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "yellow", low = "blue")
ggplot(death_2000_df,
mapping = aes(fill = log10(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "yellow", low = "blue")
ggplot(death_2000_df,
mapping = aes(fill = log10(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "yellow", low = "orange")
ggplot(death_2000_df,
mapping = aes(fill = log10(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue")
#plot
ggplot(death_2000_df,
mapping = aes(fill = log10(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "green")
ggplot(death_2000_df,
mapping = aes(fill = log10(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "violet")
ggplot(death_2000_df,
mapping = aes(fill = log10(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "purple")
ggplot(death_2000_df,
mapping = aes(fill = log10(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue")
tb_world_2016 <- tb_world %>%
filter(year == 2016)
#join
incidence_100k_2016_df <- left_join(worldmap,
tb_world_2016,
by = c("iso_a3" = "iso3"))
#plot
ggplot(incidence_100k_2016_df,
mapping = aes(fill = log10(est_incidences_per100k_people))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue")
tb_world_2016 <- tb_world %>%
filter(year == 2016)
incidence_100k_2016_df <- left_join(worldmap,
tb_world_2016,
by = c("iso_a3" = "iso3"))
unique(incidence_100k_2016_df)
ggplot(incidence_100k_2016_df,
mapping = aes(fill = est_mortality_per_100K_people)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue")
tb_world_2000 <- tb_world %>%
filter(year == c(2000, 2014))
tb_world_2000 <- tb_world %>%
filter(year == c(2000:2014))
tb_world_2000 <- tb_world %>%
filter(year == c(2000:2004))
tb_world_2000 <- tb_world %>%
filter(year == 2000:2004)
tb_world_2000 <- tb_world %>%
filter(year == 2000|2001|2002|2003)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3"))
tb_world_2000_2003 <- tb_world %>%
filter(year == 2000|2001|2002|2003)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3"))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(.~year)
tb_world_2000_2003 <- tb_world %>%
filter(year == c(2000, 2001, 2002, 2003))
tb_world_2000_2003 <- tb_world %>%
filter(year < 2004)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3"))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(.~year)
tb_world_2000_2003 <- tb_world %>%
filter(year < 2004, year >= 2000)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3"))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(.~year)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_grid(.~year)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_grid(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = log10(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = log(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
unique(death_2000_2003_df$year)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3")) %>%
filter(!is.na(year))
ggplot(death_2000_2003_df,
mapping = aes(fill = log(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
facet_wrap(year~.)
library(gganimate)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
#  facet_wrap(year~.)
transition_time(year, range = c(2000L, 2016L))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
#  facet_wrap(year~.)
transition_time(year, range = c(2000, 2016))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
#  facet_wrap(year~.)
transition_state(year)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
#  facet_wrap(year~.)
transition_states(year)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
facet_wrap(year~.)
install.packages("Tmap")
install.packages("tmap")
library(tmap)
first_tmap <- tm_shape(shp = heart_disease_map) +
tm_polygons(col = "Death_Rate")
heart_disease_map <- anti_join(heart_disease, map_sf, by = "FIPS_Code")
devtools::install_github("RamiKrispin/coronavirus")
library(tidyverse)
library(sf)
library(gganimate)
library(ggmaps)
library(tidyverse)
library(sf)
library(gganimate)
library(ggmap)
head(coronavirus)
library(coronavirus)
str(coronavirus)
unique(coronavirus$cases)
coronavirus_clean <- filter(coronavirus >= 0)
coronavirus_clean <- filter(coronavirus, cases >= 0)
coronavirus_clean <- filter(coronavirus, cases >= 0) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
str(coronavirus)
coronavirus_clean <- filter(coronavirus, cases >= 0) %>%
complete(date = seq.Date(min(Date), max(Date), by="day"))
coronavirus_clean <- filter(coronavirus, cases >= 0) %>%
complete(date = seq.Date(min(date), max(date), by="day"))
east_asia_locale <- filter(coronavirus, Lat < 45 & Lat > 25, Long < 145 & Long > 95, cases > 0) %>%
mutate(lat_group = cut_interval(Lat, 20), lon_group = cut_interval(Long, 20)) %>%
na.omit() %>%
group_by(lat_group, lon_group, type, date) %>%
summarize(cases_claimed = sum(cases),lat_mean = mean(Lat), lon_mean = mean(Long)) %>%
group_by(type, date) %>%
mutate(percent = cases_claimed/sum(cases_claimed)) %>%
group_by(type, lat_group, lon_group) %>%
mutate(cum_cases = cumsum(cases_claimed)) %>%
group_by(type, date) %>%
mutate(cum_percent = cum_cases/sum(cum_cases)) %>%
group_by(lat_group, lon_group, date)
map1 <- ggmap(mapbounds) +
geom_sf(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
transition_states(states = date, transition_length = 4, state_length = 8) +
facet_grid(type~.) +
shadow_mark(alpha = 0.1, size = 1) +
enter_fade() +
exit_fade() +
labs(title = "Date: {closest_state}")
mapbounds <- get_map(location = c(95, 25, 145, 45), source = "osm", color = "bw")
map1 <- ggmap(mapbounds) +
geom_sf(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
transition_states(states = date, transition_length = 4, state_length = 8) +
facet_grid(type~.) +
shadow_mark(alpha = 0.1, size = 1) +
enter_fade() +
exit_fade() +
labs(title = "Date: {closest_state}")
map1 <- ggmap(mapbounds) +
geom_sf(east_asia_locale, mapping = aes(color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
transition_states(states = date, transition_length = 4, state_length = 8) +
facet_grid(type~.) +
shadow_mark(alpha = 0.1, size = 1) +
enter_fade() +
exit_fade() +
labs(title = "Date: {closest_state}")
map1
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
transition_states(states = date, transition_length = 4, state_length = 8) +
facet_grid(type~.) +
shadow_mark(alpha = 0.1, size = 1) +
enter_fade() +
exit_fade() +
labs(title = "Date: {closest_state}")
map1
install.packages("plotly")
library(plotly)
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed, frame = date)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20), trans = "log10") +
facet_grid(type~.) +
labs(title = "Date: {closest_state}")
ggplotly(map1) %>%
animation_opts(frame = 200,
easing = "linear",
redraw = FALSE)
coronavirus_infected <- filter(coronavirus, cases >= 0) %>%
complete(date = seq.Date(min(date), max(date), by="day")) %>%
filter(type == "confirmed")
east_asia_locale <- filter(coronavirus, Lat < 45 & Lat > 25, Long < 145 & Long > 95, cases > 0) %>%
mutate(lat_group = cut_interval(Lat, 20), lon_group = cut_interval(Long, 20)) %>%
na.omit() %>%
group_by(lat_group, lon_group, type, date) %>%
summarize(cases_claimed = sum(cases),lat_mean = mean(Lat), lon_mean = mean(Long)) %>%
group_by(type, date) %>%
mutate(percent = cases_claimed/sum(cases_claimed)) %>%
group_by(type, lat_group, lon_group) %>%
mutate(cum_cases = cumsum(cases_claimed)) %>%
group_by(type, date) %>%
mutate(cum_percent = cum_cases/sum(cum_cases)) %>%
group_by(lat_group, lon_group, date)
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed, frame = date)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
labs(title = "Date: {closest_state}")
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean)) +
geom_point(aes(color = cases_claimed, alpha = 0.4, size = cases_claimed, frame = date)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
labs(title = "Date: {closest_state}")
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, group = date, frame = date,
color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
labs(title = "Date: {closest_state}")
ggplotly(map1) %>%
animation_opts(frame = 200,
easing = "linear",
redraw = FALSE)
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, frame = date,
color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
labs(title = "Date: {closest_state}")
ggplotly(map1) %>%
animation_opts(frame = 200,
easing = "linear",
redraw = FALSE)
library(tidyverse)
library(stringr)
library(scrobbler)
my_data <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
str(my_data)
unique(my_data$date_unix)
my_data <- mutate(my_data, date = as.Date(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')),
time = as.Time(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')))
unique(my_data$date_time)
my_data <- mutate(my_data, date = as.Date(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')),
date_time = as.Time(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')))
my_data <- mutate(my_data, date = as.Date(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')),
date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET'))
unique(my_data$date_time)
install.packages(spotifyr)
library(spotifyr)
install.packages("spotifyr")
library(tidyverse)
library(stringr)
library(scrobbler)
library(spotifyr)
my_data <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
unique(my_data$date_unix)
my_data <- my_data %>%
mutate(date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(date_time)) %>%
mutate(doy = weekdays(date))
unique(my_data$doy)
colnames(my_data)
my_data <- my_data %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(date_time)) %>%
mutate(doy = weekdays(date))
str(my_data)
my_data <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
last_fm_raw <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
