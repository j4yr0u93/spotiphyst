tb_world_2000 <- tb_world %>%
filter(year == c(2000:2014))
tb_world_2000 <- tb_world %>%
filter(year == c(2000:2004))
tb_world_2000 <- tb_world %>%
filter(year == 2000:2004)
tb_world_2000 <- tb_world %>%
filter(year == 2000|2001|2002|2003)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3"))
tb_world_2000_2003 <- tb_world %>%
filter(year == 2000|2001|2002|2003)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3"))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(.~year)
tb_world_2000_2003 <- tb_world %>%
filter(year == c(2000, 2001, 2002, 2003))
tb_world_2000_2003 <- tb_world %>%
filter(year < 2004)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3"))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(.~year)
tb_world_2000_2003 <- tb_world %>%
filter(year < 2004, year >= 2000)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3"))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(.~year)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_grid(.~year)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_grid(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = log10(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = log(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
unique(death_2000_2003_df$year)
death_2000_2003_df <- left_join(worldmap,
tb_world_2000_2003,
by = c("iso_a3" = "iso3")) %>%
filter(!is.na(year))
ggplot(death_2000_2003_df,
mapping = aes(fill = log(est_mortality))) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue") +
facet_wrap(year~.)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
facet_wrap(year~.)
library(gganimate)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
#  facet_wrap(year~.)
transition_time(year, range = c(2000L, 2016L))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
#  facet_wrap(year~.)
transition_time(year, range = c(2000, 2016))
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
#  facet_wrap(year~.)
transition_state(year)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
#  facet_wrap(year~.)
transition_states(year)
ggplot(death_2000_2003_df,
mapping = aes(fill = est_mortality)) +
geom_sf(color = NA) +
scale_fill_gradient(high = "orange", low = "blue", trans = "log10") +
facet_wrap(year~.)
install.packages("Tmap")
install.packages("tmap")
library(tmap)
first_tmap <- tm_shape(shp = heart_disease_map) +
tm_polygons(col = "Death_Rate")
heart_disease_map <- anti_join(heart_disease, map_sf, by = "FIPS_Code")
devtools::install_github("RamiKrispin/coronavirus")
library(tidyverse)
library(sf)
library(gganimate)
library(ggmaps)
library(tidyverse)
library(sf)
library(gganimate)
library(ggmap)
head(coronavirus)
library(coronavirus)
str(coronavirus)
unique(coronavirus$cases)
coronavirus_clean <- filter(coronavirus >= 0)
coronavirus_clean <- filter(coronavirus, cases >= 0)
coronavirus_clean <- filter(coronavirus, cases >= 0) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
str(coronavirus)
coronavirus_clean <- filter(coronavirus, cases >= 0) %>%
complete(date = seq.Date(min(Date), max(Date), by="day"))
coronavirus_clean <- filter(coronavirus, cases >= 0) %>%
complete(date = seq.Date(min(date), max(date), by="day"))
east_asia_locale <- filter(coronavirus, Lat < 45 & Lat > 25, Long < 145 & Long > 95, cases > 0) %>%
mutate(lat_group = cut_interval(Lat, 20), lon_group = cut_interval(Long, 20)) %>%
na.omit() %>%
group_by(lat_group, lon_group, type, date) %>%
summarize(cases_claimed = sum(cases),lat_mean = mean(Lat), lon_mean = mean(Long)) %>%
group_by(type, date) %>%
mutate(percent = cases_claimed/sum(cases_claimed)) %>%
group_by(type, lat_group, lon_group) %>%
mutate(cum_cases = cumsum(cases_claimed)) %>%
group_by(type, date) %>%
mutate(cum_percent = cum_cases/sum(cum_cases)) %>%
group_by(lat_group, lon_group, date)
map1 <- ggmap(mapbounds) +
geom_sf(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
transition_states(states = date, transition_length = 4, state_length = 8) +
facet_grid(type~.) +
shadow_mark(alpha = 0.1, size = 1) +
enter_fade() +
exit_fade() +
labs(title = "Date: {closest_state}")
mapbounds <- get_map(location = c(95, 25, 145, 45), source = "osm", color = "bw")
map1 <- ggmap(mapbounds) +
geom_sf(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
transition_states(states = date, transition_length = 4, state_length = 8) +
facet_grid(type~.) +
shadow_mark(alpha = 0.1, size = 1) +
enter_fade() +
exit_fade() +
labs(title = "Date: {closest_state}")
map1 <- ggmap(mapbounds) +
geom_sf(east_asia_locale, mapping = aes(color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
transition_states(states = date, transition_length = 4, state_length = 8) +
facet_grid(type~.) +
shadow_mark(alpha = 0.1, size = 1) +
enter_fade() +
exit_fade() +
labs(title = "Date: {closest_state}")
map1
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
transition_states(states = date, transition_length = 4, state_length = 8) +
facet_grid(type~.) +
shadow_mark(alpha = 0.1, size = 1) +
enter_fade() +
exit_fade() +
labs(title = "Date: {closest_state}")
map1
install.packages("plotly")
library(plotly)
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed, frame = date)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20), trans = "log10") +
facet_grid(type~.) +
labs(title = "Date: {closest_state}")
ggplotly(map1) %>%
animation_opts(frame = 200,
easing = "linear",
redraw = FALSE)
coronavirus_infected <- filter(coronavirus, cases >= 0) %>%
complete(date = seq.Date(min(date), max(date), by="day")) %>%
filter(type == "confirmed")
east_asia_locale <- filter(coronavirus, Lat < 45 & Lat > 25, Long < 145 & Long > 95, cases > 0) %>%
mutate(lat_group = cut_interval(Lat, 20), lon_group = cut_interval(Long, 20)) %>%
na.omit() %>%
group_by(lat_group, lon_group, type, date) %>%
summarize(cases_claimed = sum(cases),lat_mean = mean(Lat), lon_mean = mean(Long)) %>%
group_by(type, date) %>%
mutate(percent = cases_claimed/sum(cases_claimed)) %>%
group_by(type, lat_group, lon_group) %>%
mutate(cum_cases = cumsum(cases_claimed)) %>%
group_by(type, date) %>%
mutate(cum_percent = cum_cases/sum(cum_cases)) %>%
group_by(lat_group, lon_group, date)
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, color = cases_claimed, alpha = 0.4, size = cases_claimed, frame = date)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
labs(title = "Date: {closest_state}")
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean)) +
geom_point(aes(color = cases_claimed, alpha = 0.4, size = cases_claimed, frame = date)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
labs(title = "Date: {closest_state}")
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, group = date, frame = date,
color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
labs(title = "Date: {closest_state}")
ggplotly(map1) %>%
animation_opts(frame = 200,
easing = "linear",
redraw = FALSE)
map1 <- ggmap(mapbounds) +
geom_point(east_asia_locale, mapping = aes(x = lon_mean, y = lat_mean, frame = date,
color = cases_claimed, alpha = 0.4, size = cases_claimed)) +
scale_color_continuous(type = "viridis") +
scale_size_continuous(range = c(5, 20)) +
labs(title = "Date: {closest_state}")
ggplotly(map1) %>%
animation_opts(frame = 200,
easing = "linear",
redraw = FALSE)
library(tidyverse)
library(stringr)
library(scrobbler)
my_data <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
str(my_data)
unique(my_data$date_unix)
my_data <- mutate(my_data, date = as.Date(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')),
time = as.Time(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')))
unique(my_data$date_time)
my_data <- mutate(my_data, date = as.Date(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')),
date_time = as.Time(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')))
my_data <- mutate(my_data, date = as.Date(as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')),
date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET'))
unique(my_data$date_time)
install.packages(spotifyr)
library(spotifyr)
install.packages("spotifyr")
library(tidyverse)
library(stringr)
library(scrobbler)
library(spotifyr)
my_data <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
unique(my_data$date_unix)
my_data <- my_data %>%
mutate(date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(date_time)) %>%
mutate(doy = weekdays(date))
unique(my_data$doy)
colnames(my_data)
my_data <- my_data %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(date_time)) %>%
mutate(doy = weekdays(date))
str(my_data)
my_data <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
last_fm_raw <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
install.packages("lubridate")
install.packages("knitr")
library(tidyverse)
library(lubridate)
library(knitr)
library(stringr)
library(scrobbler)
library(spotifyr)
library(tidyverse)
library(lubridate)
library(knitr)
library(stringr)
library(scrobbler)
library(spotifyr)
last_fm_raw <- download_scrobbles(username = "j4yr0u93", api_key = "7cbb82a48708ebc982d41a8127eccaec")
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(date_time)) %>%
mutate(doy = weekdays(date)) %>%
factor(doy, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(doy = weekdays(date)) %>%
factor(doy, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = weekdays(date)) %>%
factor(dow, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
factor(dow, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
factor(dow, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
factor(dow, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
factor(dow, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
factor(dow, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
?factor()
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = as.factor(weekdays(date), levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = as.ordered(weekdays(date), levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = factor(weekdays(date), ordered = TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
unique(last_fm_formatted$dow)
install.packages("RcppTOML")
library(RcppTOML)
?RcppTOML::parseTOML()
API_keys <- RcppTOML::parseToml(system.file("toml", "API_keys.toml", package = "RcppTOML"))
setwd("C:/Users/louri/Desktop/spotiphyst")
API_keys <- RcppTOML::parseToml(system.file("toml", "API_keys.toml", package = "RcppTOML"))
API_keys <- RcppTOML::parseToml("./API_keys.toml")
API_keys <- RcppTOML::parseToml("API_keys.toml")
`/system.file()
?system.file()
?system.file
API_keys <- RcppTOML::parseToml("", "API_keys.toml")
API_keys <- RcppTOML::parseToml("./", "API_keys.toml")
API_keys <- RcppTOML::parseToml("./~", "API_keys.toml")
API_keys <- RcppTOML::parseToml("API_keys.toml")
API_keys <- RcppTOML::parseToml("API_keys.toml")
API_keys <- RcppTOML::parseToml("API_keys.toml")
API_keys <- RcppTOML::parseToml("API_keys.toml")
API_keys
get_user_info <- function(userID){
API_keys <- RcppTOML::parseToml("API_keys.toml")
last_fm_data <- last_fm_pull(API_keys$lastfm[spotify_API_key], userID)
}
#function to pull last_fm_data
last_fm_pull <- function(lastfm_key, userID){
last_fm_raw <- scrobbler::download_scrobbles(username = userID, api_key = lastfm_key)
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = factor(weekdays(date), ordered = TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
}
get_user_info("j4yr0u93")
API_keys$lastfm
#function to get user music data
get_user_info <- function(userID){
API_keys <- RcppTOML::parseToml("API_keys.toml")
last_fm_data <- last_fm_pull(API_keys$lastfm$lastfm_API_key, userID)
}
#function to pull last_fm_data
last_fm_pull <- function(lastfm_key, userID){
last_fm_raw <- scrobbler::download_scrobbles(username = userID, api_key = lastfm_key)
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = factor(weekdays(date), ordered = TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
}
my_data <- get_user_info("j4yr0u93")
API_keys$lastfm$lastfm_API_key
unique(my_data$date_time)
unique(my_data$date)
unique(my_data$dow)
colnames(my_data)
get_artist_audio_features(artist = "baroness", authorization = API_keys$spotify$spotify_API_key)
?get_artist_audio_features
?spotifyr::get_spotify_access_token
?spotifyr::get_spotify_authorization_code
API_keys <- RcppTOML::parseToml("API_keys.toml")
get_user_data <- function(userID){
API_keys <- RcppTOML::parseToml("API_keys.toml")
lastfm_key <- API_keys$keys$lastfm_API_key
last_fm_data <- last_fm_pull(lastfm_key, userID)
spotify_key <- API_keys$keys$spotify_API_key
spotify_secret <- API_keys$keys$spotify_secret
user_data <- spotify_features(spotify_key, spotify_secret, last_fm_data)
}
#function to pull last_fm_data
last_fm_pull <- function(lastfm_key, userID){
last_fm_raw <- scrobbler::download_scrobbles(username = userID, api_key = lastfm_key)
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = factor(weekdays(date), ordered = TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
return(last_fm_formatted)
}
#function to get user music data and clean it
get_user_data <- function(userID){
API_keys <- RcppTOML::parseToml("API_keys.toml")
lastfm_key <- API_keys$keys$lastfm_API_key
last_fm_data <- last_fm_pull(lastfm_key, userID)
spotify_key <- API_keys$keys$spotify_API_key
spotify_secret <- API_keys$keys$spotify_secret
user_data <- spotify_features(spotify_key, spotify_secret, last_fm_data)
}
#function to pull last_fm_data
last_fm_pull <- function(lastfm_key, userID){
last_fm_raw <- scrobbler::download_scrobbles(username = userID, api_key = lastfm_key)
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = factor(weekdays(date), ordered = TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
return(last_fm_formatted)
}
API_keys <- RcppTOML::parseToml("API_keys.toml")
spotify_key <- API_keys$keys$spotify_API_key
spotify_secret <- API_keys$keys$spotify_secret
spotifyr::get_artist_audio_features(artist = "Baroness", authorization = spotifyr::get_spotify_authorization_code(client_id = spotify_key, client_secret = spotify_secret))
spotifyr::get_artist_audio_features(artist = "Baroness", authorization = spotifyr::get_spotify_authorization_code(client_id = spotify_key, client_secret = spotify_secret))
spotifyr::get_artist_audio_features(artist = "Baroness", authorization = spotifyr::get_spotify_authorization_code(client_id = spotify_key, client_secret = spotify_secret))
spotifyr::get_artist_audio_features(artist = "Baroness", authorization = spotifyr::get_spotify_authorization_code(client_id = spotify_key, client_secret = spotify_secret))
spotifyr::get_artist_audio_features(artist = "Baroness", authorization = spotifyr::get_spotify_access_token(client_id = spotify_key, client_secret = spotify_secret))
test <- spotifyr::get_artist_audio_features(artist = "Baroness", authorization = spotifyr::get_spotify_access_token(client_id = spotify_key, client_secret = spotify_secret))
test
colnames(test)
str(test)
colnames(my_data)
test <- spotifyr::get_track_audio_features(id = mode(my_data$song_mbid), authorization = spotifyr::get_spotify_access_token(client_id = spotify_key, client_secret = spotify_secret))
test
mode(my_data$song_mbid)
str(my_data)
test <- spotifyr::get_track_audio_features(id = "39a2c0be-2b43-4e0c-934c-eb49439abb37", authorization = spotifyr::get_spotify_access_token(client_id = spotify_key, client_secret = spotify_secret))
test
test <- spotifyr::get_track_audio_features(id = "39a2c0be-2b43-4e0c-934c-eb49439abb37", authorization = spotifyr::get_spotify_access_token(client_id = spotify_key, client_secret = spotify_secret))
test
?spotifyr::get_track_audio_features
?scrobbler::download_scrobbles()
devtools::install_github("condwanaland/scrobbler")
test <- spotifyr::get_track_audio_features(id = "eb49439abb37", authorization = spotifyr::get_spotify_access_token(client_id = spotify_key, client_secret = spotify_secret))
test
test <- spotifyr::get_track_audio_features(id = "41e955b7-c659-4539-b799-9a81218a8b15", authorization = spotifyr::get_spotify_access_token(client_id = spotify_key, client_secret = spotify_secret))
test
test <- spotifyr::get_artist_audio_features(id = "baroness", authorization = spotifyr::get_spotify_access_token(client_id = spotify_key, client_secret = spotify_secret))
test <- spotifyr::get_artist_audio_features("baroness", authorization = spotifyr::get_spotify_access_token(client_id = spotify_key, client_secret = spotify_secret))
test
?search_spotify()
#function to get user music data and clean it
get_user_data <- function(userID){
API_keys <- RcppTOML::parseToml("API_keys.toml")
lastfm_key <- API_keys$keys$lastfm_API_key
last_fm_data <- last_fm_pull(lastfm_key, userID)
spotify_key <- API_keys$keys$spotify_API_key
spotify_secret <- API_keys$keys$spotify_secret
user_data <- spotify_features(spotify_key, spotify_secret, last_fm_data)
}
#function to pull last_fm_data
last_fm_pull <- function(lastfm_key, userID){
last_fm_raw <- scrobbler::download_scrobbles(username = userID, api_key = lastfm_key)
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = factor(weekdays(date), ordered = TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))) %>%
select(-c("song_mbid", "artist_mbid", "album_mbid"))
return(last_fm_formatted)
}
#function to get user music data and clean it
get_user_data <- function(userID){
#get keys from TOML
API_keys <- RcppTOML::parseToml("API_keys.toml")
#assign key
lastfm_key <- API_keys$keys$lastfm_API_key
#pull lastfm timestamps and plaintext info
last_fm_data <- last_fm_pull(lastfm_key, userID)
#assign keys
spotify_key <- API_keys$keys$spotify_API_key
spotify_secret <- API_keys$keys$spotify_secret
#garbage
#user_data <- spotify_features(spotify_key, spotify_secret, last_fm_data)
}
#function to pull last_fm_data
last_fm_pull <- function(lastfm_key, userID){
last_fm_raw <- scrobbler::download_scrobbles(username = userID, api_key = lastfm_key)
last_fm_formatted <- last_fm_raw %>%
mutate(posix_date_time = as.POSIXct(as.numeric(date_unix), origin = '1970-01-01', tz = 'ET')) %>%
mutate(date = as.Date(posix_date_time)) %>%
mutate(dow = factor(weekdays(date), ordered = TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))) %>%
dplyr::select(-c("song_mbid", "artist_mbid", "album_mbid"))
return(last_fm_formatted)
}
my_data <- get_user_info("j4yr0u93")
